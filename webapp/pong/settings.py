"""
Django settings for pong project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
# maiman-m: decoupling to avoid modification of DATABASE values directly
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-(y+&u$qj$@+-$hn3kes!%*u*(5w%wwlw*6235b2x+9o@1_trp$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'ftpong.com', 'api.ftpong.com']

# maiman-m: for allauth registration
SITE_ID = 1

# Application definition

# maiman-m: add pong apps & DRF
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # pong
    'user_profiles.apps.UserProfilesConfig',
    'friends.apps.FriendsConfig',
    'games.apps.GamesConfig',
    'frontend.apps.FrontendConfig',
    'user_auth.apps.UserAuthConfig',
    'social_auth.apps.SocialAuthConfig',
    'mfa_email.apps.MfaEmailConfig',
    # drf
    'rest_framework',
    'rest_framework.authtoken',
    # dj-rest-auth
    'dj_rest_auth',
    # django-allauth for standard registration
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'dj_rest_auth.registration',
    # geek guide
    'sslserver',
    # drf-social-oauth2
    #'oauth2_provider',
    #'social_django',
    #'drf_social_oauth2',
]

# maiman-m: add django-allauth settings for mandatory email verification on sign-up and allow password reset (prevents user_logged_in signal to follow user_signed_up)
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'

ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = 'https://ftpong.com:8000'
#ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL
#ACCOUNT_EMAIL_VERIFICATION_BY_CODE_ENABLED = True
ACCOUNT_EMAIL_SUBJECT_PREFIX = '[FT_PONG] ' # 42PONG
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = True
#ACCOUNT_SIGNUP_FORM_HONEYPOT_FIELD
ACCOUNT_SIGNUP_REDIRECT_URL = 'https://ftpong.com:8000'
ACCOUNT_USERNAME_MIN_LENGTH = 3

# drf-social-oauth2
#DRFSO2_PROPRIETARY_BACKEND_NAME = '42Intra'
#DRFSO2_URL_NAMESPACE = 'drf'
#ACTIVATE_JWT = True

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # django-allauth for standard registration
    'allauth.account.middleware.AccountMiddleware',
    # refresh token in body instead of header
    'pong.middleware.MoveJWTRefreshCookieIntoTheBody',
]

# maiman-m: enable drf authentication
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # simple jwt authentication
        'dj_rest_auth.jwt_auth.JWTCookieAuthentication',
        # drf-social-oauth2
        #'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
        #'drf_social_oauth2.authentication.SocialAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# maiman-m: add dj-rest-auth jwt support to enable jwt authentication
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = ['https://ftpong.com'] # apex domain
REST_AUTH = {
    'LOGOUT_ON_PASSWORD_CHANGE': True,
    'SESSION_LOGIN': False,
    'USE_JWT': True,
    'JWT_AUTH_COOKIE': 'jwt-access',
    'JWT_AUTH_REFRESH_COOKIE': 'jwt-refresh',
    'JWT_AUTH_SECURE': True,
}

# djangorestframework-simplejwt
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
}

# django-allauth for social accounts
SOCIALACCOUNT_PROVIDERS = {
    'fortytwo': {
        'APP': {
            'client_id': config('CLIENT_ID'),
            'secret': config('CLIENT_SECRET'),
            'key': ''
        }
    }
}
SOCIALACCOUNT_ADAPTER = 'social_auth.adapter.FortyTwoSocialAccountAdapter'
FORTYTWO_URL = 'https://api.intra.42.fr/'
#SOCIALACCOUNT_AUTO_SIGNUP = False
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'

ROOT_URLCONF = 'pong.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # maiman-m: for custom email verification template
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # maiman-m: add drf-social-oauth2 context processors
                #'social_django.context_processors.backends',
                #'social_django.context_processors.login_redirect',
            ],
        },
    },
]


WSGI_APPLICATION = 'pong.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('TRANSDB_NAME'),
        'USER': config('TRANSDB_USER'),
        'PASSWORD': config('TRANSDB_PASSWORD'),
        'HOST': config('TRANSDB_HOST'),
        'PORT': config('TRANSDB_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# maiman-m: add authentication backend
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    # drf-social-oauth2
    #'drf_social_oauth2.backends.DjangoOAuth2',
    # django-allauth for social accounts
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Singapore'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
# maiman-m: add frontend static files
STATICFILES_DIRS = [BASE_DIR / 'static']

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# maiman-m: add SMTP config for email verification
#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_USE_TLS = config('EMAIL_USE_TLS')
EMAIL_PORT = config('EMAIL_PORT')
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL')
